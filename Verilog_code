`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
//this project is about a waveform synthesizer with 8 keys,wave select input for selecting three types of waveforms :square,sine,triangle
//dac for converting digital to analog and then it will pass through a low pass filter and then through an amplifier and the output will be heard in the form of 
//sounds from the aux cable 
//special features include having a 7 segment display output for seeing which wave has been selected 
//also pitch up and pitch down for going up and down 1 octave or 12 piano notes with the help of push buttons
module top(clk,rst,start,wave_select,keys,pitch_up,pitch_down,wave1_seg,cs,mosi,sclk,done,sel);
input wire clk,rst,start,pitch_up,pitch_down;
input wire [6:0]wave_select;input wire [7:0]keys;
output wire cs,mosi,sclk,done;
output wire[6:0]wave1_seg;output reg [3:0]sel;
wire [11:0]data;
 //hardcoding this value for selecting the first 7 seven segment display
piano_wave_generator t1(clk,wave_select,keys,pitch_up,pitch_down,data,wave1_seg);
spicontroller t2(clk,rst,start,{4'b011,data},mosi,sclk,done,cs);
always@(posedge clk)begin 
sel<=8'b11111110;
end
endmodule
module piano_wave_generator(
    input wire clk,            
    input wire [3:0]wave_select,
    input wire [7:0] keys,    
    input wire pitch_up,       
    input wire pitch_down,     
    output reg [11:0]wave,output  [6:0]wave1_seg                   // 12 bit output wave is there check for all the places where the bits mismatch      
);
btoseven_segment b4(wave_select,wave1_seg);                  // seven segment for key select code                                           //seven segment for wave selection code 
    parameter C3_time = 3820181;
    parameter Csharp3_time = 3609238;
    parameter D3_time = 3403902;
    parameter Dsharp3_time = 3216113;
    parameter E3_time = 3035147;
    parameter F3_time = 2864835;
    parameter Fsharp3_time = 2707143;
    parameter G3_time = 2551020;
    parameter Gsharp3_time = 2411247;
    parameter A3_time = 2272727;
    parameter Asharp3_time = 2145206;
    parameter B3_time = 2025404;
    parameter C4_time = 1910956;
    parameter Csharp4_time = 1805418;
    parameter D4_time = 1703228;
    parameter Dsharp4_time = 1610812;
    parameter E4_time = 1519828;
    parameter F4_time = 1434355;
    parameter Fsharp4_time = 1349286;
    parameter G4_time = 1275510;
    parameter Gsharp4_time = 1206837;
    parameter A4_time = 1136364;
    parameter Asharp4_time = 1071707;
    parameter B4_time = 1009172;
    parameter C5_time = 957345;
    parameter Csharp5_time = 902216;
    parameter D5_time = 848629;
    parameter Dsharp5_time = 805699;
    parameter E5_time = 761734;
    parameter F5_time = 714874;
    parameter Fsharp5_time = 675754;
    parameter G5_time = 638808;
    parameter Gsharp5_time = 604143;
    parameter A5_time = 568182;
    parameter Asharp5_time = 533333;
    parameter B5_time = 508068;
    reg [31:0] delay_time;       // Store delay time for the selected note
    reg [4:0] note;              // Note selection based on 12 keys and pitch shift
    reg [5:0] octave_shift;      // Pitch shift (-1, 0, +1 octave)
    reg [31:0] counter;          // Counter for triangular wave timing in between
    reg [31:0] end_counter;     //counter for frequency  
    reg slope;
    reg [31:0]counter_1;      //counter for square wave
    reg [11:0]sine_lut[0:255];    //lookup table register   //i have to change this completely
    reg [7:0]address;          //address mapping for lookup table
    reg [31:0]counter_2;      //counter for sine wave
    initial begin
        octave_shift = 6'd12;    // Default shift to middle octave (C4)                // Initialize triangular wave to low
        counter = 0;             // Initialize counter
    end
    initial begin                                           //lookup table for generating sine wave
sine_lut[0] = 12'd2048;sine_lut[1] = 12'd2098;sine_lut[2] = 12'd2148;sine_lut[3] = 12'd2198;
sine_lut[4] = 12'd2248;sine_lut[5] = 12'd2298;sine_lut[6] = 12'd2348;sine_lut[7] = 12'd2397;
sine_lut[8] = 12'd2447;sine_lut[9] = 12'd2496;sine_lut[10] = 12'd2545;sine_lut[11] = 12'd2593;
sine_lut[12] = 12'd2642;sine_lut[13] = 12'd2690;sine_lut[14] = 12'd2737;sine_lut[15] = 12'd2784;
sine_lut[16] = 12'd2831;sine_lut[17] = 12'd2877;sine_lut[18] = 12'd2923;sine_lut[19] = 12'd2968;
sine_lut[20] = 12'd3012;sine_lut[21] = 12'd3056;sine_lut[22] = 12'd3100;sine_lut[23] = 12'd3143;
sine_lut[24] = 12'd3185;sine_lut[25] = 12'd3226;sine_lut[26] = 12'd3267;sine_lut[27] = 12'd3307;
sine_lut[28] = 12'd3346;sine_lut[29] = 12'd3385;sine_lut[30] = 12'd3422;sine_lut[31] = 12'd3459;
sine_lut[32] = 12'd3495;sine_lut[33] = 12'd3530;sine_lut[34] = 12'd3564;sine_lut[35] = 12'd3598;
sine_lut[36] = 12'd3630;sine_lut[37] = 12'd3661;sine_lut[38] = 12'd3692;sine_lut[39] = 12'd3721;
sine_lut[40] = 12'd3750;sine_lut[41] = 12'd3777;sine_lut[42] = 12'd3803;sine_lut[43] = 12'd3829;
sine_lut[44] = 12'd3853;sine_lut[45] = 12'd3876;sine_lut[46] = 12'd3898;sine_lut[47] = 12'd3919;
sine_lut[48] = 12'd3939;sine_lut[49] = 12'd3957;sine_lut[50] = 12'd3975;sine_lut[51] = 12'd3991;
sine_lut[52] = 12'd4006;sine_lut[53] = 12'd4020;sine_lut[54] = 12'd4033;sine_lut[55] = 12'd4045;
sine_lut[56] = 12'd4055;sine_lut[57] = 12'd4064;sine_lut[58] = 12'd4072;sine_lut[59] = 12'd4079;
sine_lut[60] = 12'd4085;sine_lut[61] = 12'd4089;sine_lut[62] = 12'd4092;sine_lut[63] = 12'd4094;
sine_lut[64] = 12'd4095;sine_lut[65] = 12'd4094;sine_lut[66] = 12'd4092;sine_lut[67] = 12'd4089;
sine_lut[68] = 12'd4085;sine_lut[69] = 12'd4079;sine_lut[70] = 12'd4072;sine_lut[71] = 12'd4064;
sine_lut[72] = 12'd4055;sine_lut[73] = 12'd4045;sine_lut[74] = 12'd4033;sine_lut[75] = 12'd4020;
sine_lut[76] = 12'd4006;sine_lut[77] = 12'd3991;sine_lut[78] = 12'd3975;sine_lut[79] = 12'd3957;
sine_lut[80] = 12'd3939;sine_lut[81] = 12'd3919;sine_lut[82] = 12'd3898;sine_lut[83] = 12'd3876;
sine_lut[84] = 12'd3853;sine_lut[85] = 12'd3829;sine_lut[86] = 12'd3803;sine_lut[87] = 12'd3777;
sine_lut[88] = 12'd3750;sine_lut[89] = 12'd3721;sine_lut[90] = 12'd3692;sine_lut[91] = 12'd3661;
sine_lut[92] = 12'd3630;sine_lut[93] = 12'd3598;sine_lut[94] = 12'd3564;sine_lut[95] = 12'd3530;
sine_lut[96] = 12'd3495;sine_lut[97] = 12'd3459;sine_lut[98] = 12'd3422;sine_lut[99] = 12'd3385;
sine_lut[100] = 12'd3346;sine_lut[101] = 12'd3307;sine_lut[102] = 12'd3267;sine_lut[103] = 12'd3226;
sine_lut[104] = 12'd3185;sine_lut[105] = 12'd3143;sine_lut[106] = 12'd3100;sine_lut[107] = 12'd3056;
sine_lut[108] = 12'd3012;sine_lut[109] = 12'd2968;sine_lut[110] = 12'd2923;sine_lut[111] = 12'd2877;
sine_lut[112] = 12'd2831;sine_lut[113] = 12'd2784;sine_lut[114] = 12'd2737;sine_lut[115] = 12'd2690;
sine_lut[116] = 12'd2642;sine_lut[117] = 12'd2593;sine_lut[118] = 12'd2545;sine_lut[119] = 12'd2496;
sine_lut[120] = 12'd2447;sine_lut[121] = 12'd2397;sine_lut[122] = 12'd2348;sine_lut[123] = 12'd2298;
sine_lut[124] = 12'd2248;sine_lut[125] = 12'd2198;sine_lut[126] = 12'd2148;sine_lut[127] = 12'd2098;
sine_lut[128] = 12'd2048;sine_lut[129] = 12'd1997;sine_lut[130] = 12'd1947;sine_lut[131] = 12'd1897;
sine_lut[132] = 12'd1847;sine_lut[133] = 12'd1797;sine_lut[134] = 12'd1747;sine_lut[135] = 12'd1698;
sine_lut[136] = 12'd1648;sine_lut[137] = 12'd1599;sine_lut[138] = 12'd1550;sine_lut[139] = 12'd1502;sine_lut[140] = 12'd1453;sine_lut[141] = 12'd1405;  
sine_lut[142] = 12'd1358;sine_lut[143] = 12'd1311;sine_lut[144] = 12'd1264;sine_lut[145] = 12'd1218;
sine_lut[146] = 12'd1172;sine_lut[147] = 12'd1127;sine_lut[148] = 12'd1083;sine_lut[149] = 12'd1039;
sine_lut[150] = 12'd995;sine_lut[151] = 12'd952;sine_lut[152] = 12'd910;sine_lut[153] = 12'd869;
sine_lut[154] = 12'd828;sine_lut[155] = 12'd788;sine_lut[156] = 12'd749;sine_lut[157] = 12'd710;
sine_lut[158] = 12'd673;sine_lut[159] = 12'd636;sine_lut[160] = 12'd600;sine_lut[161] = 12'd565;
sine_lut[162] = 12'd531;sine_lut[163] = 12'd497;sine_lut[164] = 12'd465;sine_lut[165] = 12'd434;
sine_lut[166] = 12'd403;sine_lut[167] = 12'd374;sine_lut[168] = 12'd345;sine_lut[169] = 12'd318;
sine_lut[170] = 12'd292;sine_lut[171] = 12'd266;sine_lut[172] = 12'd242;sine_lut[173] = 12'd219;
sine_lut[174] = 12'd197;sine_lut[175] = 12'd176;sine_lut[176] = 12'd156;sine_lut[177] = 12'd138;
sine_lut[178] = 12'd120;sine_lut[179] = 12'd104;sine_lut[180] = 12'd89;sine_lut[181] = 12'd75;
sine_lut[182] = 12'd62;sine_lut[183] = 12'd50;sine_lut[184] = 12'd40;sine_lut[185] = 12'd31;
sine_lut[186] = 12'd23;sine_lut[187] = 12'd16;sine_lut[188] = 12'd10;sine_lut[189] = 12'd6;
sine_lut[190] = 12'd3;sine_lut[191] = 12'd1;sine_lut[192] = 12'd1;sine_lut[193] = 12'd1;
sine_lut[194] = 12'd3;sine_lut[195] = 12'd6;sine_lut[196] = 12'd10;sine_lut[197] = 12'd16;
sine_lut[198] = 12'd23;sine_lut[199] = 12'd31;sine_lut[200] = 12'd40;sine_lut[201] = 12'd50;
sine_lut[202] = 12'd62;sine_lut[203] = 12'd75;sine_lut[204] = 12'd89;sine_lut[205] = 12'd104;
sine_lut[206] = 12'd120;sine_lut[207] = 12'd138;sine_lut[208] = 12'd156;sine_lut[209] = 12'd176;
sine_lut[210] = 12'd197;sine_lut[211] = 12'd219;sine_lut[212] = 12'd242;sine_lut[213] = 12'd266;
sine_lut[214] = 12'd292;sine_lut[215] = 12'd318;sine_lut[216] = 12'd345;sine_lut[217] = 12'd374;
sine_lut[218] = 12'd403;sine_lut[219] = 12'd434;sine_lut[220] = 12'd465;sine_lut[221] = 12'd497;
sine_lut[222] = 12'd531;sine_lut[223] = 12'd565;sine_lut[224] = 12'd600;sine_lut[225] = 12'd636;
sine_lut[226] = 12'd673;sine_lut[227] = 12'd710;sine_lut[228] = 12'd749;sine_lut[229] = 12'd788;
sine_lut[230] = 12'd828;sine_lut[231] = 12'd869;sine_lut[232] = 12'd910;sine_lut[233] = 12'd952;
sine_lut[234] = 12'd995;sine_lut[235] = 12'd1039;sine_lut[236] = 12'd1083;sine_lut[237] = 12'd1127;
sine_lut[238] = 12'd1172;sine_lut[239] = 12'd1218;sine_lut[240] = 12'd1264;sine_lut[241] = 12'd1311;
sine_lut[242] = 12'd1358;sine_lut[243] = 12'd1405;sine_lut[244] = 12'd1453;sine_lut[245] = 12'd1502;
sine_lut[246] = 12'd1550;sine_lut[247] = 12'd1599;sine_lut[248] = 12'd1648;sine_lut[249] = 12'd1698;
sine_lut[250] = 12'd1747;sine_lut[251] = 12'd1797;sine_lut[252] = 12'd1847;sine_lut[253] = 12'd1897;sine_lut[254] = 12'd1947;sine_lut[255] = 12'd1997;
 end
    // Handle pitch shift
    always @(posedge clk) begin
        if (pitch_up && octave_shift < 5'd24)
            octave_shift <= octave_shift + 4'd12; // Shift pitch up by an octave
        else if (pitch_down && octave_shift >= 4'd12)
            octave_shift <= octave_shift - 4'd12; // Shift pitch down by an octave
    end
    // Priority encoder to determine the note from 12 keys
    always @(*) begin
        casez (keys)
8'b1???????:note=5'd0;
8'b01??????:note=5'd1;
8'b001?????:note=5'd2;
8'b0001????:note=5'd3;
8'b00001???:note=5'd4;
8'b000001??:note=5'd5;
8'b0000001?:note=5'd6;
8'b00000001:note=5'd7;
default:    note=5'd15;
 endcase
 end
    // Assign delay_time based on the note and pitch shift
    always @(*) begin
        case (note + octave_shift)
            6'd0:  delay_time = C3_time;
            6'd1:  delay_time = Csharp3_time;
            6'd2:  delay_time = D3_time;
            6'd3:  delay_time = Dsharp3_time;
            6'd4:  delay_time = E3_time;
            6'd5:  delay_time = F3_time;
            6'd6:  delay_time = Fsharp3_time;
            6'd7:  delay_time = G3_time;
            6'd8:  delay_time = Gsharp3_time;
            6'd9:  delay_time = A3_time;
            6'd10: delay_time = Asharp3_time;
            6'd11: delay_time = B3_time;
            6'd12: delay_time = C4_time;
            6'd13: delay_time = Csharp4_time;
            6'd14: delay_time = D4_time;
            6'd15: delay_time = Dsharp4_time;
            6'd16: delay_time = E4_time;
            6'd17: delay_time = F4_time;
            6'd18: delay_time = Fsharp4_time;
            6'd19: delay_time = G4_time;
            6'd20: delay_time = Gsharp4_time;
            6'd21: delay_time = A4_time;
            6'd22: delay_time = Asharp4_time;
            6'd23: delay_time = B4_time;
            6'd24: delay_time = C5_time;
            6'd25: delay_time = Csharp5_time;
            6'd26: delay_time = D5_time;
            6'd27: delay_time = Dsharp5_time;
            6'd28: delay_time = E5_time;
            6'd29: delay_time = F5_time;
            6'd30: delay_time = Fsharp5_time;
            6'd31: delay_time = G5_time;
            6'd32: delay_time = Gsharp5_time;
            6'd33: delay_time = A5_time;
            6'd34: delay_time = Asharp5_time;
            6'd35: delay_time = B5_time;
            default: delay_time = 0;
        endcase
    end    
    initial begin 
        slope<=1'b1;
        end_counter<=0;
        wave<=0;
        counter<=0;
        counter_1<=0;
        counter_2<=0;
        address<=0;
    end
// triangle wave generation based on the delay time //gotta change this part for 12 bit wave generation
    always @(posedge clk) begin
    if(wave_select==4'b0001)begin                                    //for triangular wave generation this is also fine 
        if(counter==delay_time>>12&&wave==0&&slope==1'b1)
        begin 
        slope<=1'b1;wave<=wave+1'b1;end_counter<=0;counter<=0;
        end
        else if(counter==delay_time>>12&&wave==0&&slope==1'b0)
        begin 
        slope<=1'b1;wave<=wave+1'b1;end_counter<=0;counter<=0;
        end
        else if(counter==delay_time>>12&&wave<12'd4095&&slope==1'b1)
        begin 
        slope<=1'b1;wave<=wave+1'b1;end_counter<=end_counter+1'b1;counter<=0;
        end
        else if(counter==delay_time>>12&&wave==12'd4095&&slope==1'b1)
        begin 
        slope<=1'b0;wave<=wave-1'b1;end_counter<=end_counter+1'b1;counter<=0;
        end
        else if(counter==delay_time>>12&&wave<12'd4095&&slope==1'b0)
        begin 
        slope<=1'b0;wave<=wave-1'b1;end_counter<=end_counter+1'b1;counter<=0;
        end
        else begin 
        counter<=counter+1'b1;
        end
    end
    //////////////////////////////////
    else if(wave_select==4'b0000)                                      //for square wave generation  this is fine
    begin
    if(counter_1==delay_time)begin 
    wave<=~wave;
    counter_1<=0;
    end
    else 
    counter_1<=counter_1+1'b1;
    end
    /////////////////////////////////////////////
    else begin                                                      //for sine wave generation usage of lookup table 
    if(counter_2>=delay_time>>14)
    begin 
    counter_2=0;
    if(address <=12'd4095)begin 
            address=address+1'b1;
            wave=sine_lut[address];
    end
    else begin 
        address=0;
        wave=sine_lut[address];
    end
    end
    else 
        counter_2=counter_2+1'b1;
    end
    
  end
endmodule
module spicontroller(input wire clk,rst,start,input wire [15:0]data,output reg mosi,sclk,done,cs);
reg [3:0]bit_cnt;  //bit counter
reg [15:0]shift_reg; //data shift register
reg [2:0]state;  // for finite state machine of spi 
parameter IDLE=3'b000,LOAD=3'b001,TRANSFER=3'b010,DONE=3'b100;
//clock divider for sclk i dont know if this is necessary or not maybe it has to be done according to the data sheet of the dac
reg [3:0]clk_div;
reg scl_enable;    //for enabling the clock to toggle
always@(posedge clk or posedge rst)begin 
if(rst)begin clk_div<=0;scl_enable<=0;end
else begin 
if(clk_div<4'd9)begin 
clk_div<=clk_div+1'b1;
scl_enable<=0;
end
else begin 
clk_div<=0;
scl_enable<=1'b1;
end                        //stop after 4 cycles
end
end

always@(posedge clk or posedge rst)   //FSM OF THE SPI CONTROLLER
begin 
if(rst)begin 
            bit_cnt<=0;shift_reg<=0;mosi<=0;sclk<=0;done<=0;state<=IDLE;cs<=1'b1;
        end
else begin
case(state)
IDLE: begin cs<=1'b1;sclk<=0;done<=0;if(start)state<=LOAD; end         
LOAD: begin cs<=1'b0;shift_reg<={4'b0011,data[11:0]};bit_cnt<=4'd15;state<=TRANSFER;end   //16  bit always zero cause it is a single channel,15 bit buffered or unbuffered
TRANSFER: begin //14 gain selection 1* or 2* 13 bit active and 0 means shutdown
if(scl_enable)begin 
sclk<=~sclk;   //toggle sclk at enable signal
if(!sclk)begin 
//send data on the rising edge or falling edge depends on the specification
mosi<=shift_reg[bit_cnt];
bit_cnt<=bit_cnt-1'b1;
end
else if(bit_cnt==0)state<=DONE;
end
end
DONE: begin  cs<=1'b1;mosi<=0;sclk<=0;done<=1'b1;state<=IDLE;end
endcase
end 
end
endmodule
/*module spicontroller(
    input wire clk,        // FPGA System Clock
    input wire rst,        // Reset
    input wire start,      // Start Transmission
    input wire [11:0] data, // 12-bit DAC Data
    output reg mosi,       // SPI Data Line
    output reg sclk,       // SPI Clock
    output reg done,       // Transfer Complete Flag
    output reg cs          // Chip Select (Active Low)
);

    reg [3:0] bit_cnt;     // Bit Counter
    reg [15:0] shift_reg;  // Shift Register for 16-bit SPI Data
    reg [2:0] state;       // FSM States
    reg [3:0] clk_div;     // SPI Clock Divider
    reg scl_enable;        // SPI Clock Enable
    
    // SPI FSM States
    parameter IDLE = 3'b000, LOAD = 3'b001, TRANSFER = 3'b010, DONE = 3'b100;
    
    // SPI Clock Divider (Divides FPGA Clock)
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            clk_div <= 0;
            scl_enable <= 0;
        end
        else begin
            if (clk_div < 4'd9) begin // Adjust this based on FPGA clock
                clk_div <= clk_div + 1'b1;
                scl_enable <= 0;
            end
            else begin
                clk_div <= 0;
                scl_enable <= 1'b1;
            end
        end
    end

    // SPI FSM Logic
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            bit_cnt <= 0;
            shift_reg <= 0;
            mosi <= 0;
            sclk <= 0;
            done <= 0;
            state <= IDLE;
            cs <= 1'b1; // Default to inactive
        end
        else begin
            case (state)
                IDLE: begin
                    cs <= 1'b1;  // DAC is not selected
                    sclk <= 0;   // SPI Clock Low
                    done <= 0;
                    if (start) state <= LOAD;
                end
                
                LOAD: begin
                    cs <= 1'b0; // Activate DAC
                    shift_reg <= {4'b0011, data[11:0]}; // MCP4921 Data Format
                    bit_cnt <= 4'd15; // Start at MSB
                    state <= TRANSFER;
                end
                
                TRANSFER: begin
                    if (scl_enable) begin
                        sclk <= ~sclk; // Toggle SCLK
                        
                        if (!sclk) begin // Falling edge: Shift data out
                            mosi <= shift_reg[bit_cnt];
                            bit_cnt <= bit_cnt - 1'b1;
                        end
                        
                        if (bit_cnt == 0) state <= DONE;
                    end
                end
                
                DONE: begin
                    cs <= 1'b1;   // Deactivate DAC
                    mosi <= 0;
                    sclk <= 0;
                    done <= 1'b1; // Indicate transfer complete
                    state <= IDLE;
                end
                
            endcase
        end
    end
    
endmodule*/
